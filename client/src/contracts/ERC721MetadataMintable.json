{
  "contractName": "ERC721MetadataMintable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintWithTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC721 minting logic with metadata\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"initialize(string,string)\":{\"details\":\"Constructor function\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mintWithTokenURI(address,uint256,string)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\",\"tokenURI\":\"The token URI of the minted token.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721MetadataMintable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721MetadataMintable.sol\":\"ERC721MetadataMintable\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\":{\"keccak256\":\"0x75481aaa988c5e9fbc91b4f695678806579c04e0ad56907978c1ca5c7e92a682\",\"urls\":[\"bzzr://da472135eb9268d863825ea26e227a9f8980c54bd32e0764d61711acca59fc89\"]},\"@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0x45f044e51e5972c09b8aa3073a5bf3736a57601b77123f4150fb259a53106ace\",\"urls\":[\"bzzr://8c33ae59cde326452091e5f4f345ecae67532b65e2f1a00215800023dec0c8f2\"]},\"@openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x982e18d2e3df98e3339f70f955a4d1fb78411a29963d0ea34621759eef67e86d\",\"urls\":[\"bzzr://a5438906da44343a09c6b47666d3649f269d9d156f2109e147e21595b2284363\"]},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0x0c965fac47588d2fd480fa86602359952bc60a12112d079574a104355e412de5\",\"urls\":[\"bzzr://4ca877ed5db72bdb8e2a6885d3dd8e8f564110c639d2bd16f441d227b67a2955\"]},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xc48ee580d20820cc0ef122b2acc9bf8836731dd8b9671cc03d21a12e3ab14976\",\"urls\":[\"bzzr://744cf3b8280d4a050ad0771e2ed0d7d41bbddfa40a541933d46bb31007a2e4a9\"]},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x64f884a17f06bbab9bf00a8b3fcfe38c647e6de54f8c33c58bb1afd929d6e40b\",\"urls\":[\"bzzr://3b921a00b951f26ae7eced94d55f4f048ca32f4aff2bebe3f478b185c9f46a80\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Metadata.sol\":{\"keccak256\":\"0xaac86cf0a491293bb11a69006398e4bae74354718185b8530abe9a4fb0de92e2\",\"urls\":[\"bzzr://063d468aa25810f8eb9b3e0ee031cfb1982dd9222dcdbe9f928f15312eb7b580\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721MetadataMintable.sol\":{\"keccak256\":\"0xdcc6b3f84583d93ed7a2b8db57d18a03ea7c72188c724b095a6e7f7c4cd6da16\",\"urls\":[\"bzzr://baaa3ad421539e92608cacd2bd906038df41466084eafb3991af2bb2b92e18d0\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x19af40d91f2ff44aec865fa295a18efa10f5d293feed39477dca2d13e7450628\",\"urls\":[\"bzzr://8611907e2938eef10665cb0bdb0c708d05054860c991d24e6dd731bdcca21e3c\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0x743dd23f873ebc16f752041a789f768c450fa21b0a95dde9f95ce5e88a249893\",\"urls\":[\"bzzr://f6054720ccf7f7187c6109bf45b75647fef6a15ac836905bf7680eb423cace89\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xeb8a266ef2da0aa60eea704031902ffd28b2d13dd0e8f5b69bcfb8415f2dad85\",\"urls\":[\"bzzr://393e9843d41c0652f115378cc58083c4acc4d83f7999fe22932d5e237c215d3f\"]},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"keccak256\":\"0xea16b9933153c647242ba50b3e494fb133063d49f1fa81823f35a8c28754142e\",\"urls\":[\"bzzr://aa2b2eb534149525e194341c01cadf666668a1b7d679a268d10e23570a7e26b1\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0xf79d9851c085aa8412e87d7a26d3485488fe12538ecb4e317ce41fc1f2c3a16a\",\"urls\":[\"bzzr://e45c5a995f57637b2300a376647ee345cc9cb30ee1984735091fcd4b10ff3500\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506115d7806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638129fc1c116100ad578063aa271e1a11610071578063aa271e1a1461055f578063b88d4fde14610585578063c4d66de814610649578063c87b56dd1461066f578063e985e9c51461068c5761012c565b80638129fc1c146104f357806395d89b41146104fb578063983b2d56146105035780639865027514610529578063a22cb465146105315761012c565b806342842e0e116100f457806342842e0e146102865780634cd88b76146102bc57806350bb4e7f146103e55780636352211e1461049e57806370a08231146104bb5761012c565b806301ffc9a71461013157806306fdde031461016c578063081812fc146101e9578063095ea7b31461022257806323b872dd14610250575b600080fd5b6101586004803603602081101561014757600080fd5b50356001600160e01b0319166106ba565b604080519115158252519081900360200190f35b6101746106d9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ae578181015183820152602001610196565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610206600480360360208110156101ff57600080fd5b5035610770565b604080516001600160a01b039092168252519081900360200190f35b61024e6004803603604081101561023857600080fd5b506001600160a01b0381351690602001356107a2565b005b61024e6004803603606081101561026657600080fd5b506001600160a01b0381358116916020810135909116906040013561084b565b61024e6004803603606081101561029c57600080fd5b506001600160a01b03813581169160208101359091169060400135610870565b61024e600480360360408110156102d257600080fd5b810190602081018135600160201b8111156102ec57600080fd5b8201836020820111156102fe57600080fd5b803590602001918460018302840111600160201b8311171561031f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561037157600080fd5b82018360208201111561038357600080fd5b803590602001918460018302840111600160201b831117156103a457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061088b945050505050565b610158600480360360608110156103fb57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561042a57600080fd5b82018360208201111561043c57600080fd5b803590602001918460018302840111600160201b8311171561045d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610981945050505050565b610206600480360360208110156104b457600080fd5b50356109b5565b6104e1600480360360208110156104d157600080fd5b50356001600160a01b03166109df565b60408051918252519081900360200190f35b61024e610a17565b610174610ad9565b61024e6004803603602081101561051957600080fd5b50356001600160a01b0316610b3a565b61024e610b57565b61024e6004803603604081101561054757600080fd5b506001600160a01b0381351690602001351515610b62565b6101586004803603602081101561057557600080fd5b50356001600160a01b0316610be6565b61024e6004803603608081101561059b57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156105d557600080fd5b8201836020820111156105e757600080fd5b803590602001918460018302840111600160201b8311171561060857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bf9945050505050565b61024e6004803603602081101561065f57600080fd5b50356001600160a01b0316610c21565b6101746004803603602081101561068557600080fd5b5035610cf8565b610158600480360360408110156106a257600080fd5b506001600160a01b0381358116916020013516610dad565b6001600160e01b03191660009081526033602052604090205460ff1690565b609c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107655780601f1061073a57610100808354040283529160200191610765565b820191906000526020600020905b81548152906001019060200180831161074857829003601f168201915b505050505090505b90565b600061077b82610ddb565b151561078657600080fd5b506000908152606760205260409020546001600160a01b031690565b60006107ad826109b5565b90506001600160a01b0383811690821614156107c857600080fd5b336001600160a01b03821614806107e457506107e48133610dad565b15156107ef57600080fd5b60008281526067602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6108553382610df8565b151561086057600080fd5b61086b838383610e57565b505050565b61086b83838360405180602001604052806000815250610bf9565b600054610100900460ff16806108a457506108a4610f39565b806108b2575060005460ff16155b15156108f257604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff1615801561091d576000805460ff1961ff0019909116610100171660011790555b610925610f3f565b151561093057600080fd5b825161094390609c9060208601906114e5565b50815161095790609d9060208501906114e5565b5061096b600160e01b635b5e139f02610f59565b801561086b576000805461ff0019169055505050565b600061098c33610be6565b151561099757600080fd5b6109a18484610f95565b6109ab8383611038565b5060019392505050565b6000818152606660205260408120546001600160a01b03168015156109d957600080fd5b92915050565b60006001600160a01b03821615156109f657600080fd5b6001600160a01b03821660009081526068602052604090206109d99061106b565b600054610100900460ff1680610a305750610a30610f39565b80610a3e575060005460ff16155b1515610a7e57604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015610aa9576000805460ff1961ff0019909116610100171660011790555b610ab161106f565b610ac4600160e01b6380ac58cd02610f59565b8015610ad6576000805461ff00191690555b50565b609d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107655780601f1061073a57610100808354040283529160200191610765565b610b4333610be6565b1515610b4e57600080fd5b610ad681611114565b610b603361115c565b565b6001600160a01b038216331415610b7857600080fd5b3360008181526069602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006109d960d18363ffffffff6111a416565b610c0484848461084b565b610c10848484846111db565b1515610c1b57600080fd5b50505050565b600054610100900460ff1680610c3a5750610c3a610f39565b80610c48575060005460ff16155b1515610c8857604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015610cb3576000805460ff1961ff0019909116610100171660011790555b610cbb610f3f565b1515610cc657600080fd5b610cce611316565b1515610cd957600080fd5b610ce28261132b565b8015610cf4576000805461ff00191690555b5050565b6060610d0382610ddb565b1515610d0e57600080fd5b6000828152609e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260696020908152604080832093909416825291909152205460ff1690565b6000908152606660205260409020546001600160a01b0316151590565b600080610e04836109b5565b9050806001600160a01b0316846001600160a01b03161480610e3f5750836001600160a01b0316610e3484610770565b6001600160a01b0316145b80610e4f5750610e4f8185610dad565b949350505050565b826001600160a01b0316610e6a826109b5565b6001600160a01b031614610e7d57600080fd5b6001600160a01b0382161515610e9257600080fd5b610e9b816113d5565b6001600160a01b0383166000908152606860205260409020610ebc90611410565b6001600160a01b0382166000908152606860205260409020610edd90611427565b60008181526066602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b303b1590565b6000610f54600160e01b6380ac58cd026106ba565b905090565b6001600160e01b03198082161415610f7057600080fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b0382161515610faa57600080fd5b610fb381610ddb565b15610fbd57600080fd5b600081815260666020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260689091529020610ffc90611427565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61104182610ddb565b151561104c57600080fd5b6000828152609e60209081526040909120825161086b928401906114e5565b5490565b600054610100900460ff16806110885750611088610f39565b80611096575060005460ff16155b15156110d657604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015611101576000805460ff1961ff0019909116610100171660011790555b610ac4600160e01b6301ffc9a702610f59565b61112560d18263ffffffff61143016565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61116d60d18263ffffffff61147e16565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b03821615156111bb57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b60006111ef846001600160a01b03166114ca565b15156111fd57506001610e4f565b604051600160e11b630a85bd0102815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b8381101561127a578181015183820152602001611262565b50505050905090810190601f1680156112a75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b505050506040513d60208110156112f357600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000610f54600160e01b635b5e139f026106ba565b600054610100900460ff16806113445750611344610f39565b80611352575060005460ff16155b151561139257604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff161580156113bd576000805460ff1961ff0019909116610100171660011790555b6113c682610be6565b1515610ce257610ce282611114565b6000818152606760205260409020546001600160a01b031615610ad657600090815260676020526040902080546001600160a01b0319169055565b805461142390600163ffffffff6114d016565b9055565b80546001019055565b6001600160a01b038116151561144557600080fd5b61144f82826111a4565b1561145957600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038116151561149357600080fd5b61149d82826111a4565b15156114a857600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b3b151590565b6000828211156114df57600080fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061152657805160ff1916838001178555611553565b82800160010185558215611553579182015b82811115611553578251825591602001919060010190611538565b5061155f929150611563565b5090565b61076d91905b8082111561155f576000815560010161156956fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058207caf3785f16208c64dd9f48f7e3b76de282c78e713cad14e453b4a329386b2e80029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638129fc1c116100ad578063aa271e1a11610071578063aa271e1a1461055f578063b88d4fde14610585578063c4d66de814610649578063c87b56dd1461066f578063e985e9c51461068c5761012c565b80638129fc1c146104f357806395d89b41146104fb578063983b2d56146105035780639865027514610529578063a22cb465146105315761012c565b806342842e0e116100f457806342842e0e146102865780634cd88b76146102bc57806350bb4e7f146103e55780636352211e1461049e57806370a08231146104bb5761012c565b806301ffc9a71461013157806306fdde031461016c578063081812fc146101e9578063095ea7b31461022257806323b872dd14610250575b600080fd5b6101586004803603602081101561014757600080fd5b50356001600160e01b0319166106ba565b604080519115158252519081900360200190f35b6101746106d9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ae578181015183820152602001610196565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610206600480360360208110156101ff57600080fd5b5035610770565b604080516001600160a01b039092168252519081900360200190f35b61024e6004803603604081101561023857600080fd5b506001600160a01b0381351690602001356107a2565b005b61024e6004803603606081101561026657600080fd5b506001600160a01b0381358116916020810135909116906040013561084b565b61024e6004803603606081101561029c57600080fd5b506001600160a01b03813581169160208101359091169060400135610870565b61024e600480360360408110156102d257600080fd5b810190602081018135600160201b8111156102ec57600080fd5b8201836020820111156102fe57600080fd5b803590602001918460018302840111600160201b8311171561031f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561037157600080fd5b82018360208201111561038357600080fd5b803590602001918460018302840111600160201b831117156103a457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061088b945050505050565b610158600480360360608110156103fb57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561042a57600080fd5b82018360208201111561043c57600080fd5b803590602001918460018302840111600160201b8311171561045d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610981945050505050565b610206600480360360208110156104b457600080fd5b50356109b5565b6104e1600480360360208110156104d157600080fd5b50356001600160a01b03166109df565b60408051918252519081900360200190f35b61024e610a17565b610174610ad9565b61024e6004803603602081101561051957600080fd5b50356001600160a01b0316610b3a565b61024e610b57565b61024e6004803603604081101561054757600080fd5b506001600160a01b0381351690602001351515610b62565b6101586004803603602081101561057557600080fd5b50356001600160a01b0316610be6565b61024e6004803603608081101561059b57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156105d557600080fd5b8201836020820111156105e757600080fd5b803590602001918460018302840111600160201b8311171561060857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bf9945050505050565b61024e6004803603602081101561065f57600080fd5b50356001600160a01b0316610c21565b6101746004803603602081101561068557600080fd5b5035610cf8565b610158600480360360408110156106a257600080fd5b506001600160a01b0381358116916020013516610dad565b6001600160e01b03191660009081526033602052604090205460ff1690565b609c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107655780601f1061073a57610100808354040283529160200191610765565b820191906000526020600020905b81548152906001019060200180831161074857829003601f168201915b505050505090505b90565b600061077b82610ddb565b151561078657600080fd5b506000908152606760205260409020546001600160a01b031690565b60006107ad826109b5565b90506001600160a01b0383811690821614156107c857600080fd5b336001600160a01b03821614806107e457506107e48133610dad565b15156107ef57600080fd5b60008281526067602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6108553382610df8565b151561086057600080fd5b61086b838383610e57565b505050565b61086b83838360405180602001604052806000815250610bf9565b600054610100900460ff16806108a457506108a4610f39565b806108b2575060005460ff16155b15156108f257604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff1615801561091d576000805460ff1961ff0019909116610100171660011790555b610925610f3f565b151561093057600080fd5b825161094390609c9060208601906114e5565b50815161095790609d9060208501906114e5565b5061096b600160e01b635b5e139f02610f59565b801561086b576000805461ff0019169055505050565b600061098c33610be6565b151561099757600080fd5b6109a18484610f95565b6109ab8383611038565b5060019392505050565b6000818152606660205260408120546001600160a01b03168015156109d957600080fd5b92915050565b60006001600160a01b03821615156109f657600080fd5b6001600160a01b03821660009081526068602052604090206109d99061106b565b600054610100900460ff1680610a305750610a30610f39565b80610a3e575060005460ff16155b1515610a7e57604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015610aa9576000805460ff1961ff0019909116610100171660011790555b610ab161106f565b610ac4600160e01b6380ac58cd02610f59565b8015610ad6576000805461ff00191690555b50565b609d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107655780601f1061073a57610100808354040283529160200191610765565b610b4333610be6565b1515610b4e57600080fd5b610ad681611114565b610b603361115c565b565b6001600160a01b038216331415610b7857600080fd5b3360008181526069602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b60006109d960d18363ffffffff6111a416565b610c0484848461084b565b610c10848484846111db565b1515610c1b57600080fd5b50505050565b600054610100900460ff1680610c3a5750610c3a610f39565b80610c48575060005460ff16155b1515610c8857604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015610cb3576000805460ff1961ff0019909116610100171660011790555b610cbb610f3f565b1515610cc657600080fd5b610cce611316565b1515610cd957600080fd5b610ce28261132b565b8015610cf4576000805461ff00191690555b5050565b6060610d0382610ddb565b1515610d0e57600080fd5b6000828152609e602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260696020908152604080832093909416825291909152205460ff1690565b6000908152606660205260409020546001600160a01b0316151590565b600080610e04836109b5565b9050806001600160a01b0316846001600160a01b03161480610e3f5750836001600160a01b0316610e3484610770565b6001600160a01b0316145b80610e4f5750610e4f8185610dad565b949350505050565b826001600160a01b0316610e6a826109b5565b6001600160a01b031614610e7d57600080fd5b6001600160a01b0382161515610e9257600080fd5b610e9b816113d5565b6001600160a01b0383166000908152606860205260409020610ebc90611410565b6001600160a01b0382166000908152606860205260409020610edd90611427565b60008181526066602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b303b1590565b6000610f54600160e01b6380ac58cd026106ba565b905090565b6001600160e01b03198082161415610f7057600080fd5b6001600160e01b0319166000908152603360205260409020805460ff19166001179055565b6001600160a01b0382161515610faa57600080fd5b610fb381610ddb565b15610fbd57600080fd5b600081815260666020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260689091529020610ffc90611427565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61104182610ddb565b151561104c57600080fd5b6000828152609e60209081526040909120825161086b928401906114e5565b5490565b600054610100900460ff16806110885750611088610f39565b80611096575060005460ff16155b15156110d657604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff16158015611101576000805460ff1961ff0019909116610100171660011790555b610ac4600160e01b6301ffc9a702610f59565b61112560d18263ffffffff61143016565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61116d60d18263ffffffff61147e16565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b03821615156111bb57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b60006111ef846001600160a01b03166114ca565b15156111fd57506001610e4f565b604051600160e11b630a85bd0102815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b8381101561127a578181015183820152602001611262565b50505050905090810190601f1680156112a75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b505050506040513d60208110156112f357600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000610f54600160e01b635b5e139f026106ba565b600054610100900460ff16806113445750611344610f39565b80611352575060005460ff16155b151561139257604051600160e51b62461bcd02815260040180806020018281038252602e81526020018061157e602e913960400191505060405180910390fd5b600054610100900460ff161580156113bd576000805460ff1961ff0019909116610100171660011790555b6113c682610be6565b1515610ce257610ce282611114565b6000818152606760205260409020546001600160a01b031615610ad657600090815260676020526040902080546001600160a01b0319169055565b805461142390600163ffffffff6114d016565b9055565b80546001019055565b6001600160a01b038116151561144557600080fd5b61144f82826111a4565b1561145957600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038116151561149357600080fd5b61149d82826111a4565b15156114a857600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b3b151590565b6000828211156114df57600080fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061152657805160ff1916838001178555611553565b82800160010185558215611553579182015b82811115611553578251825591602001919060010190611538565b5061155f929150611563565b5090565b61076d91905b8082111561155f576000815560010161156956fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a723058207caf3785f16208c64dd9f48f7e3b76de282c78e713cad14e453b4a329386b2e80029",
  "sourceMap": "247:840:15:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:840:15;;;;;;;",
  "deployedSourceMap": "247:840:15:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:840:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;870:131:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;870:131:9;-1:-1:-1;;;;;;870:131:9;;:::i;:::-;;;;;;;;;;;;;;;;;;1304:83:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1304:83:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4027:151:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4027:151:13;;:::i;:::-;;;;-1:-1:-1;;;;;4027:151:13;;;;;;;;;;;;;;3450:292;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3450:292:13;;;;;;;;:::i;:::-;;5583:180;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5583:180:13;;;;;;;;;;;;;;;;;:::i;6396:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6396:132:13;;;;;;;;;;;;;;;;;:::i;741:321:14:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;741:321:14;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;741:321:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;741:321:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;741:321:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;741:321:14;;;;;;;;-1:-1:-1;741:321:14;;-1:-1:-1;;;;;5:28;;2:2;;;46:1;43;36:12;2:2;741:321:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;741:321:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;741:321:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;741:321:14;;-1:-1:-1;741:321:14;;-1:-1:-1;;;;;741:321:14:i;840:209:15:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;840:209:15;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;840:209:15;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;840:209:15;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;840:209:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;840:209:15;;-1:-1:-1;840:209:15;;-1:-1:-1;;;;;840:209:15:i;2852:177:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2852:177:13;;:::i;2474:160::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2474:160:13;-1:-1:-1;;;;;2474:160:13;;:::i;:::-;;;;;;;;;;;;;;;;1937:205;;;:::i;1495:87:14:-;;;:::i;661:90:5:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;661:90:5;-1:-1:-1;;;;;661:90:5;;:::i;757:75::-;;;:::i;4470:213:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4470:213:13;;;;;;;;;;:::i;548:107:5:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;548:107:5;-1:-1:-1;;;;;548:107:5;;:::i;7233:211:13:-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;7233:211:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;7233:211:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7233:211:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7233:211:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7233:211:13;;-1:-1:-1;7233:211:13;;-1:-1:-1;;;;;7233:211:13:i;338:203:15:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;338:203:15;-1:-1:-1;;;;;338:203:15;;:::i;1781:151:14:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1781:151:14;;:::i;5004:145:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5004:145:13;;;;;;;;;;:::i;870:131:9:-;-1:-1:-1;;;;;;961:33:9;938:4;961:33;;;:20;:33;;;;;;;;;870:131::o;1304:83:14:-;1375:5;1368:12;;;;;;;;-1:-1:-1;;1368:12:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1343:13;;1368:12;;1375:5;;1368:12;;1375:5;1368:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1304:83;;:::o;4027:151:13:-;4086:7;4113:16;4121:7;4113;:16::i;:::-;4105:25;;;;;;;;-1:-1:-1;4147:24:13;;;;:15;:24;;;;;;-1:-1:-1;;;;;4147:24:13;;4027:151::o;3450:292::-;3513:13;3529:16;3537:7;3529;:16::i;:::-;3513:32;-1:-1:-1;;;;;;3563:11:13;;;;;;;;3555:20;;;;;;3593:10;-1:-1:-1;;;;;3593:19:13;;;;:58;;;3616:35;3633:5;3640:10;3616:16;:35::i;:::-;3585:67;;;;;;;;3663:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;3663:29:13;-1:-1:-1;;;;;3663:29:13;;;;;;;;;3707:28;;3663:24;;3707:28;;;;;;;3450:292;;;:::o;5583:180::-;5673:39;5692:10;5704:7;5673:18;:39::i;:::-;5665:48;;;;;;;;5724:32;5738:4;5744:2;5748:7;5724:13;:32::i;:::-;5583:180;;;:::o;6396:132::-;6482:39;6499:4;6505:2;6509:7;6482:39;;;;;;;;;;;;:16;:39::i;741:321:14:-;1024:12:20;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:20;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:20;;;;;1225:18;1213:4;1225:18;;;1170:80;840:28:14;:26;:28::i;:::-;832:37;;;;;;;;880:12;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;902:16:14;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;1006:49:14;-1:-1:-1;;;;;1006:18:14;:49::i;:::-;1268:14:20;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:20;;;741:321:14;;;:::o;840:209:15:-;946:4;503:20:5;512:10;503:8;:20::i;:::-;495:29;;;;;;;;962:18:15;968:2;972:7;962:5;:18::i;:::-;990:31;1003:7;1012:8;990:12;:31::i;:::-;-1:-1:-1;1038:4:15;840:209;;;;;:::o;2852:177:13:-;2907:7;2942:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2942:20:13;2980:19;;;2972:28;;;;;;3017:5;2852:177;-1:-1:-1;;2852:177:13:o;2474:160::-;2529:7;-1:-1:-1;;;;;2556:19:13;;;;2548:28;;;;;;-1:-1:-1;;;;;2593:24:13;;;;;;:17;:24;;;;;:34;;:32;:34::i;1937:205::-;1024:12:20;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:20;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:20;;;;;1225:18;1213:4;1225:18;;;1170:80;1988:19:13;:17;:19::i;:::-;2095:40;-1:-1:-1;;;;;2095:18:13;:40::i;:::-;1268:14:20;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:20;;;1264:55;1937:205:13;:::o;1495:87:14:-;1568:7;1561:14;;;;;;;;-1:-1:-1;;1561:14:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1536:13;;1561:14;;1568:7;;1561:14;;1568:7;1561:14;;;;;;;;;;;;;;;;;;;;;;;;661:90:5;503:20;512:10;503:8;:20::i;:::-;495:29;;;;;;;;725:19;736:7;725:10;:19::i;757:75::-;800:25;814:10;800:13;:25::i;:::-;757:75::o;4470:213:13:-;-1:-1:-1;;;;;4549:16:13;;4555:10;4549:16;;4541:25;;;;;;4595:10;4576:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4576:34:13;;;;;;;;;;;;:45;;-1:-1:-1;;4576:45:13;;;;;;;;;;4636:40;;;;;;;4576:34;;4595:10;4636:40;;;;;;;;;;;4470:213;;:::o;548:107:5:-;604:4;627:21;:8;640:7;627:21;:12;:21;:::i;7233:211:13:-;7339:31;7352:4;7358:2;7362:7;7339:12;:31::i;:::-;7388:48;7411:4;7417:2;7421:7;7430:5;7388:22;:48::i;:::-;7380:57;;;;;;;;7233:211;;;;:::o;338:203:15:-;1024:12:20;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:20;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:20;;;;;1225:18;1213:4;1225:18;;;1170:80;411:28:15;:26;:28::i;:::-;403:37;;;;;;;;458:36;:34;:36::i;:::-;450:45;;;;;;;;505:29;527:6;505:21;:29::i;:::-;1268:14:20;1264:55;;;1307:5;1292:20;;-1:-1:-1;;1292:20:20;;;1264:55;338:203:15;;:::o;1781:151:14:-;1839:13;1872:16;1880:7;1872;:16::i;:::-;1864:25;;;;;;;;1906:19;;;;:10;:19;;;;;;;;;1899:26;;;;;;-1:-1:-1;;1899:26:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1906:19;;1899:26;;1906:19;1899:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1781:151;;;:::o;5004:145:13:-;-1:-1:-1;;;;;5107:25:13;;;5084:4;5107:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5004:145::o;7638:152::-;7695:4;7727:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7727:20:13;7764:19;;;7638:152::o;8150:246::-;8235:4;8251:13;8267:16;8275:7;8267;:16::i;:::-;8251:32;;8312:5;-1:-1:-1;;;;;8301:16:13;:7;-1:-1:-1;;;;;8301:16:13;;:51;;;;8345:7;-1:-1:-1;;;;;8321:31:13;:20;8333:7;8321:11;:20::i;:::-;-1:-1:-1;;;;;8321:31:13;;8301:51;:87;;;;8356:32;8373:5;8380:7;8356:16;:32::i;:::-;8293:96;8150:246;-1:-1:-1;;;;8150:246:13:o;10098:362::-;10211:4;-1:-1:-1;;;;;10191:24:13;:16;10199:7;10191;:16::i;:::-;-1:-1:-1;;;;;10191:24:13;;10183:33;;;;;;-1:-1:-1;;;;;10234:16:13;;;;10226:25;;;;;;10262:23;10277:7;10262:14;:23::i;:::-;-1:-1:-1;;;;;10296:23:13;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;10341:21:13;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10385:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;;;;;10385:25:13;-1:-1:-1;;;;;10385:25:13;;;;;;;;;10426:27;;10385:20;;10426:27;;;;;;;10098:362;;;:::o;1409:467:20:-;1842:7;1830:20;1864:7;1409:467;:::o;2148:123:13:-;2202:4;2225:39;-1:-1:-1;;;;;2225:17:13;:39::i;:::-;2218:46;;2148:123;:::o;1080:158:9:-;-1:-1:-1;;;;;;1155:25:9;;;;;1147:34;;;;;;-1:-1:-1;;;;;;1191:33:9;;;;;:20;:33;;;;;:40;;-1:-1:-1;;1191:40:9;1227:4;1191:40;;;1080:158::o;8639:259:13:-;-1:-1:-1;;;;;8710:16:13;;;;8702:25;;;;;;8746:16;8754:7;8746;:16::i;:::-;8745:17;8737:26;;;;;;8774:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;;;;;8774:25:13;-1:-1:-1;;;;;8774:25:13;;;;;;;;8809:21;;:17;:21;;;;;:33;;:31;:33::i;:::-;8858;;8883:7;;-1:-1:-1;;;;;8858:33:13;;;8875:1;;8858:33;;8875:1;;8858:33;8639:259;;:::o;2169:144:14:-;2254:16;2262:7;2254;:16::i;:::-;2246:25;;;;;;;;2281:19;;;;:10;:19;;;;;;;;:25;;;;;;;;:::i;1062:112:8:-;1153:14;;1062:112::o;681:98:9:-;1024:12:20;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:20;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:20;;;;;1225:18;1213:4;1225:18;;;1170:80;732:40:9;-1:-1:-1;;;;;732:18:9;:40::i;838:119:5:-;894:21;:8;907:7;894:21;:12;:21;:::i;:::-;930:20;;-1:-1:-1;;;;;930:20:5;;;;;;;;838:119;:::o;963:127::-;1022:24;:8;1038:7;1022:24;:15;:24;:::i;:::-;1061:22;;-1:-1:-1;;;;;1061:22:5;;;;;;;;963:127;:::o;786:162:4:-;858:4;-1:-1:-1;;;;;882:21:4;;;;874:30;;;;;;-1:-1:-1;;;;;;921:20:4;:11;:20;;;;;;;;;;;;;;;786:162::o;10988:347:13:-;11109:4;11134:15;:2;-1:-1:-1;;;;;11134:13:13;;:15::i;:::-;11133:16;11129:58;;;-1:-1:-1;11172:4:13;11165:11;;11129:58;11213:70;;-1:-1:-1;;;;;11213:70:13;;11250:10;11213:70;;;;;;-1:-1:-1;;;;;11213:70:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;11197:13;;11213:36;;;;;;11250:10;;11262:4;;11268:7;;11277:5;;11213:70;;;;;;;;;;;11197:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11213:70:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11213:70:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11213:70:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11213:70:13;-1:-1:-1;;;;;;11301:26:13;-1:-1:-1;;;;;11301:26:13;;-1:-1:-1;;10988:347:13;;;;;;:::o;1068:132:14:-;1122:4;1145:48;-1:-1:-1;;;;;1145:17:14;:48::i;320:137:5:-;1024:12:20;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:20;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;1151:13;1170:80;;;;1198:12;:19;;-1:-1:-1;;;;1198:19:20;;;;;1225:18;1213:4;1225:18;;;1170:80;390:16:5;399:6;390:8;:16::i;:::-;389:17;385:66;;;422:18;433:6;422:10;:18::i;11496:171:13:-;11595:1;11559:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11559:24:13;:38;11555:106;;11648:1;11613:24;;;:15;:24;;;;;:37;;-1:-1:-1;;;;;;11613:37:13;;;11496:171::o;1275:108:8:-;1355:14;;:21;;1374:1;1355:21;:18;:21;:::i;:::-;1338:38;;1275:108::o;1180:89::-;1243:19;;1261:1;1243:19;;;1180:89::o;259:181:4:-;-1:-1:-1;;;;;335:21:4;;;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:4;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:4;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:4;;;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;;;-1:-1:-1;;;;;663:20:4;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:4;;;514:184::o;463:616:19:-;1026:20;1064:8;;;463:616::o;1211:145:12:-;1269:7;1296:6;;;;1288:15;;;;;;-1:-1:-1;1325:5:12;;;1211:145::o;247:840:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;247:840:15;;;-1:-1:-1;247:840:15;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.2;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\nimport \"./ERC721Metadata.sol\";\nimport \"../../access/roles/MinterRole.sol\";\n\n\n/**\n * @title ERC721MetadataMintable\n * @dev ERC721 minting logic with metadata\n */\ncontract ERC721MetadataMintable is Initializable, ERC721, ERC721Metadata, MinterRole {\n    function initialize(address sender) public initializer {\n        require(ERC721._hasBeenInitialized());\n        require(ERC721Metadata._hasBeenInitialized());\n        MinterRole.initialize(sender);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param tokenId The token id to mint.\n     * @param tokenURI The token URI of the minted token.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mintWithTokenURI(address to, uint256 tokenId, string memory tokenURI) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return true;\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721MetadataMintable.sol",
  "ast": {
    "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721MetadataMintable.sol",
    "exportedSymbols": {
      "ERC721MetadataMintable": [3331]
    },
    "id": 3332,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3263,
        "literals": ["solidity", "^", "0.5", ".2"],
        "nodeType": "PragmaDirective",
        "src": "0:23:15"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 3264,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 3562,
        "src": "25:60:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 3265,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 3262,
        "src": "86:30:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 3266,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 1994,
        "src": "117:43:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3267,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3561,
              "src": "282:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$3561",
                "typeString": "contract Initializable"
              }
            },
            "id": 3268,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3269,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3109,
              "src": "297:6:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3109",
                "typeString": "contract ERC721"
              }
            },
            "id": 3270,
            "nodeType": "InheritanceSpecifier",
            "src": "297:6:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3271,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3261,
              "src": "305:14:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$3261",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 3272,
            "nodeType": "InheritanceSpecifier",
            "src": "305:14:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3273,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1993,
              "src": "321:10:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$1993",
                "typeString": "contract MinterRole"
              }
            },
            "id": 3274,
            "nodeType": "InheritanceSpecifier",
            "src": "321:10:15"
          }
        ],
        "contractDependencies": [1993, 2302, 2312, 3109, 3261, 3437, 3463, 3561],
        "contractKind": "contract",
        "documentation": "@title ERC721MetadataMintable\n@dev ERC721 minting logic with metadata",
        "fullyImplemented": true,
        "id": 3331,
        "linearizedBaseContracts": [3331, 1993, 3261, 3463, 3109, 3437, 2302, 2312, 3561],
        "name": "ERC721MetadataMintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3299,
              "nodeType": "Block",
              "src": "393:148:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 3282,
                            "name": "ERC721",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3109,
                            "src": "411:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC721_$3109_$",
                              "typeString": "type(contract ERC721)"
                            }
                          },
                          "id": 3283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_hasBeenInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2613,
                          "src": "411:26:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "411:28:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3281,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [4184, 4185],
                      "referencedDeclaration": 4184,
                      "src": "403:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:37:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3286,
                  "nodeType": "ExpressionStatement",
                  "src": "403:37:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 3288,
                            "name": "ERC721Metadata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3261,
                            "src": "458:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$3261_$",
                              "typeString": "type(contract ERC721Metadata)"
                            }
                          },
                          "id": 3289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_hasBeenInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3172,
                          "src": "458:34:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "458:36:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3287,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [4184, 4185],
                      "referencedDeclaration": 4184,
                      "src": "450:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3291,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "450:45:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3292,
                  "nodeType": "ExpressionStatement",
                  "src": "450:45:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3296,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3276,
                        "src": "527:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3293,
                        "name": "MinterRole",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1993,
                        "src": "505:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_MinterRole_$1993_$",
                          "typeString": "type(contract MinterRole)"
                        }
                      },
                      "id": 3295,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1911,
                      "src": "505:21:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 3297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "505:29:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3298,
                  "nodeType": "ExpressionStatement",
                  "src": "505:29:15"
                }
              ]
            },
            "documentation": null,
            "id": 3300,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3279,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3278,
                  "name": "initializer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3542,
                  "src": "381:11:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "381:11:15"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3277,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3276,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 3300,
                  "src": "358:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3275,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "358:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "357:16:15"
            },
            "returnParameters": {
              "id": 3280,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "393:0:15"
            },
            "scope": 3331,
            "src": "338:203:15",
            "stateMutability": "nonpayable",
            "superFunction": 1911,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3325,
              "nodeType": "Block",
              "src": "952:97:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3314,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3302,
                        "src": "968:2:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3315,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3304,
                        "src": "972:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3313,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2932,
                      "src": "962:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "962:18:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3317,
                  "nodeType": "ExpressionStatement",
                  "src": "962:18:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3319,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3304,
                        "src": "1003:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3320,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3306,
                        "src": "1012:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3318,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3226,
                      "src": "990:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 3321,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "990:31:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3322,
                  "nodeType": "ExpressionStatement",
                  "src": "990:31:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 3323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1038:4:15",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 3312,
                  "id": 3324,
                  "nodeType": "Return",
                  "src": "1031:11:15"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@param tokenURI The token URI of the minted token.\n@return A boolean that indicates if the operation was successful.",
            "id": 3326,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3309,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3308,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1922,
                  "src": "926:10:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "926:10:15"
              }
            ],
            "name": "mintWithTokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3307,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3302,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "866:10:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3301,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3304,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "878:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3303,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "878:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3306,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "895:22:15",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3305,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "895:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "865:53:15"
            },
            "returnParameters": {
              "id": 3312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3311,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "946:4:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3310,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "946:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "945:6:15"
            },
            "scope": 3331,
            "src": "840:209:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3330,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 3331,
            "src": "1055:29:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 3327,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1055:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 3329,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 3328,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1063:2:15",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1055:11:15",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 3332,
        "src": "247:840:15"
      }
    ],
    "src": "0:1088:15"
  },
  "legacyAST": {
    "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721MetadataMintable.sol",
    "exportedSymbols": {
      "ERC721MetadataMintable": [3331]
    },
    "id": 3332,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3263,
        "literals": ["solidity", "^", "0.5", ".2"],
        "nodeType": "PragmaDirective",
        "src": "0:23:15"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 3264,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 3562,
        "src": "25:60:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 3265,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 3262,
        "src": "86:30:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol",
        "file": "../../access/roles/MinterRole.sol",
        "id": 3266,
        "nodeType": "ImportDirective",
        "scope": 3332,
        "sourceUnit": 1994,
        "src": "117:43:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3267,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3561,
              "src": "282:13:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$3561",
                "typeString": "contract Initializable"
              }
            },
            "id": 3268,
            "nodeType": "InheritanceSpecifier",
            "src": "282:13:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3269,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3109,
              "src": "297:6:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3109",
                "typeString": "contract ERC721"
              }
            },
            "id": 3270,
            "nodeType": "InheritanceSpecifier",
            "src": "297:6:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3271,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3261,
              "src": "305:14:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$3261",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 3272,
            "nodeType": "InheritanceSpecifier",
            "src": "305:14:15"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3273,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1993,
              "src": "321:10:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$1993",
                "typeString": "contract MinterRole"
              }
            },
            "id": 3274,
            "nodeType": "InheritanceSpecifier",
            "src": "321:10:15"
          }
        ],
        "contractDependencies": [1993, 2302, 2312, 3109, 3261, 3437, 3463, 3561],
        "contractKind": "contract",
        "documentation": "@title ERC721MetadataMintable\n@dev ERC721 minting logic with metadata",
        "fullyImplemented": true,
        "id": 3331,
        "linearizedBaseContracts": [3331, 1993, 3261, 3463, 3109, 3437, 2302, 2312, 3561],
        "name": "ERC721MetadataMintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3299,
              "nodeType": "Block",
              "src": "393:148:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 3282,
                            "name": "ERC721",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3109,
                            "src": "411:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC721_$3109_$",
                              "typeString": "type(contract ERC721)"
                            }
                          },
                          "id": 3283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_hasBeenInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2613,
                          "src": "411:26:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "411:28:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3281,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [4184, 4185],
                      "referencedDeclaration": 4184,
                      "src": "403:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:37:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3286,
                  "nodeType": "ExpressionStatement",
                  "src": "403:37:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 3288,
                            "name": "ERC721Metadata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3261,
                            "src": "458:14:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$3261_$",
                              "typeString": "type(contract ERC721Metadata)"
                            }
                          },
                          "id": 3289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_hasBeenInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3172,
                          "src": "458:34:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 3290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "458:36:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3287,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [4184, 4185],
                      "referencedDeclaration": 4184,
                      "src": "450:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3291,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "450:45:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3292,
                  "nodeType": "ExpressionStatement",
                  "src": "450:45:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3296,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3276,
                        "src": "527:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 3293,
                        "name": "MinterRole",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1993,
                        "src": "505:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_MinterRole_$1993_$",
                          "typeString": "type(contract MinterRole)"
                        }
                      },
                      "id": 3295,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1911,
                      "src": "505:21:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 3297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "505:29:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3298,
                  "nodeType": "ExpressionStatement",
                  "src": "505:29:15"
                }
              ]
            },
            "documentation": null,
            "id": 3300,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3279,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3278,
                  "name": "initializer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3542,
                  "src": "381:11:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "381:11:15"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3277,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3276,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 3300,
                  "src": "358:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3275,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "358:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "357:16:15"
            },
            "returnParameters": {
              "id": 3280,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "393:0:15"
            },
            "scope": 3331,
            "src": "338:203:15",
            "stateMutability": "nonpayable",
            "superFunction": 1911,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3325,
              "nodeType": "Block",
              "src": "952:97:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3314,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3302,
                        "src": "968:2:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3315,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3304,
                        "src": "972:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3313,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2932,
                      "src": "962:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "962:18:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3317,
                  "nodeType": "ExpressionStatement",
                  "src": "962:18:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3319,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3304,
                        "src": "1003:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3320,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3306,
                        "src": "1012:8:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 3318,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3226,
                      "src": "990:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 3321,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "990:31:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3322,
                  "nodeType": "ExpressionStatement",
                  "src": "990:31:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 3323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1038:4:15",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 3312,
                  "id": 3324,
                  "nodeType": "Return",
                  "src": "1031:11:15"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@param tokenURI The token URI of the minted token.\n@return A boolean that indicates if the operation was successful.",
            "id": 3326,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3309,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3308,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1922,
                  "src": "926:10:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "926:10:15"
              }
            ],
            "name": "mintWithTokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3307,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3302,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "866:10:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3301,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3304,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "878:15:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3303,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "878:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3306,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "895:22:15",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3305,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "895:6:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "865:53:15"
            },
            "returnParameters": {
              "id": 3312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3311,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3326,
                  "src": "946:4:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3310,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "946:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "945:6:15"
            },
            "scope": 3331,
            "src": "840:209:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3330,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 3331,
            "src": "1055:29:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 3327,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1055:7:15",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 3329,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 3328,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1063:2:15",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1055:11:15",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 3332,
        "src": "247:840:15"
      }
    ],
    "src": "0:1088:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-14T05:28:21.019Z",
  "devdoc": {
    "details": "ERC721 minting logic with metadata",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "initialize(string,string)": {
        "details": "Constructor function"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mintWithTokenURI(address,uint256,string)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint.",
          "tokenURI": "The token URI of the minted token."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721MetadataMintable"
  },
  "userdoc": {
    "methods": {}
  }
}
